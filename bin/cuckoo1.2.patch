diff -rupN cuckoo/analyzer/windows/analyzer.py cuckoo_to_patch/analyzer/windows/analyzer.py
--- cuckoo/analyzer/windows/analyzer.py	2014-11-20 14:51:18.689226284 +0100
+++ cuckoo_to_patch/analyzer/windows/analyzer.py	2014-11-20 14:49:33.252555602 +0100
@@ -65,6 +65,12 @@ def add_pid(pid):
         log.info("Added new process to list with pid: %s", pid)
         PROCESS_LIST.append(int(pid))
 
+def remove_pid(pid):
+    """Remove a process from process list."""
+    if type(pid) == long or type(pid) == int or type(pid) == str:
+        log.info("Process with pid %s has terminated", pid)
+        PROCESS_LIST.remove(pid)
+
 def add_pids(pids):
     """Add PID."""
     if isinstance(pids, (tuple, list)):
@@ -230,6 +236,43 @@ class PipeHandler(Thread):
                     response = "\x00"
                 else:
                     response = hookdll_encode(url_dlls)
+    
+            # Remove PID from process list because we received a notification from the driver
+            elif command.startswith("KTERMINATE:"):
+                data = command[11:]
+                process_id = int(data)
+                if process_id:
+                    if process_id in PROCESS_LIST:
+                        remove_pid(process_id)
+
+            # Same that below but we don't want to inject any DLLs because it's a kernel analysis
+            elif command.startswith("KPROCESS:"):
+                PROCESS_LOCK.acquire()
+                data = command[9:]
+                process_id = int(data)
+                thread_id = None
+                if process_id:
+                    if process_id not in (PID, PPID):
+                        if process_id not in PROCESS_LIST:
+                            proc = Process(pid=process_id,thread_id=thread_id)
+                            filepath = proc.get_filepath()
+                            filename = os.path.basename(filepath)
+
+                            if not protected_filename(filename):
+                                add_pid(process_id)
+                                log.info("Announce process name : %s", filename)
+                PROCESS_LOCK.release()
+
+            elif command.startswith("KERROR:"):
+                error_msg = command[7:]
+                log.error("Error : %s", str(error_msg))
+
+            # Stop the analysis
+            elif command == "KSUBVERT":
+                for pid in PROCESS_LIST:
+                    log.info("Process with pid %s has terminated", pid)
+                    PROCESS_LIST.remove(pid)
+
 
             # In case of PID, the client is trying to notify the creation of
             # a new process to be injected and monitored.
@@ -596,6 +639,8 @@ class Analyzer:
             pid_check = False
 
         time_counter = 0
+        kernel_analysis = self.config.get_options().get("kernel_analysis", None)
+
 
         while True:
             time_counter += 1
@@ -614,14 +659,16 @@ class Analyzer:
                 # If the process monitor is enabled we start checking whether
                 # the monitored processes are still alive.
                 if pid_check:
-                    for pid in PROCESS_LIST:
-                        if not Process(pid=pid).is_alive():
-                            log.info("Process with pid %s has terminated", pid)
-                            PROCESS_LIST.remove(pid)
+                    if kernel_analysis is False:
+                        for pid in PROCESS_LIST:
+                            if not Process(pid=pid).is_alive():
+                                log.info("Process with pid %s has terminated", pid)
+                                PROCESS_LIST.remove(pid)
 
                     # If none of the monitored processes are still alive, we
                     # can terminate the analysis.
                     if not PROCESS_LIST:
+                        KERNEL32.Sleep(1000)
                         log.info("Process list is empty, "
                                  "terminating analysis.")
                         break
@@ -677,13 +724,14 @@ class Analyzer:
             # that we clean up remaining open handles (sockets, files, etc.).
             log.info("Terminating remaining processes before shutdown.")
 
-            for pid in PROCESS_LIST:
-                proc = Process(pid=pid)
-                if proc.is_alive():
-                    try:
-                        proc.terminate()
-                    except:
-                        continue
+            if kernel_analysis is False:
+                for pid in PROCESS_LIST:
+                    proc = Process(pid=pid)
+                    if proc.is_alive():
+                        try:
+                            proc.terminate()
+                        except:
+                            continue
 
         # Run the finish callback of every available Auxiliary module.
         for aux in aux_avail:
diff -rupN cuckoo/analyzer/windows/lib/api/process.py cuckoo_to_patch/analyzer/windows/lib/api/process.py
--- cuckoo/analyzer/windows/lib/api/process.py	2014-11-20 14:51:18.695892951 +0100
+++ cuckoo_to_patch/analyzer/windows/lib/api/process.py	2014-11-20 14:49:33.229222268 +0100
@@ -5,14 +5,16 @@
 import os
 import logging
 import random
+import platform
+
 from time import time
-from ctypes import byref, c_ulong, create_string_buffer, c_int, sizeof
+from ctypes import byref, c_ulong, create_string_buffer, c_int, sizeof, c_void_p, c_char_p, POINTER
 from shutil import copy
 
 from lib.common.constants import PIPE, PATHS, SHUTDOWN_MUTEX
 from lib.common.defines import KERNEL32, NTDLL, SYSTEM_INFO, STILL_ACTIVE
-from lib.common.defines import THREAD_ALL_ACCESS, PROCESS_ALL_ACCESS
-from lib.common.defines import STARTUPINFO, PROCESS_INFORMATION
+from lib.common.defines import THREAD_ALL_ACCESS, PROCESS_ALL_ACCESS, TH32CS_SNAPPROCESS
+from lib.common.defines import STARTUPINFO, PROCESS_INFORMATION, PROCESSENTRY32
 from lib.common.defines import CREATE_NEW_CONSOLE, CREATE_SUSPENDED
 from lib.common.defines import MEM_RESERVE, MEM_COMMIT, PAGE_READWRITE
 from lib.common.defines import MEMORY_BASIC_INFORMATION
@@ -22,8 +24,20 @@ from lib.common.rand import random_strin
 from lib.common.results import NetlogFile
 from lib.core.config import Config
 
+IOCTL_PID = 0x222008
+IOCTL_CUCKOO_PATH = 0x22200C
+PATH_KERNEL_DRIVER = "\\\\.\\DriverSSDT"
+
+GENERIC_READ = 0x80000000
+GENERIC_WRITE = 0x40000000
+OPEN_EXISTING = 3
+FILE_ATTRIBUTE_NORMAL = 128
+
 log = logging.getLogger(__name__)
 
+def is_os_64bit():
+    return platform.machine().endswith('64')
+
 def randomize_dll(dll_path):
     """Randomize DLL name.
     @return: new DLL path.
@@ -76,14 +90,14 @@ class Process:
                 self.h_process = KERNEL32.GetCurrentProcess()
             else:
                 self.h_process = KERNEL32.OpenProcess(PROCESS_ALL_ACCESS,
-                                                      False,
-                                                      self.pid)
-            ret = True
+                        False,
+                        self.pid)
+                ret = True
 
         if self.thread_id and not self.h_thread:
             self.h_thread = KERNEL32.OpenThread(THREAD_ALL_ACCESS,
-                                                False,
-                                                self.thread_id)
+                    False,
+                    self.thread_id)
             ret = True
         return ret
 
@@ -130,10 +144,10 @@ class Process:
         NTDLL.NtQueryInformationProcess.restype = c_int
 
         ret = NTDLL.NtQueryInformationProcess(self.h_process,
-                                              27,
-                                              byref(pbi),
-                                              sizeof(pbi),
-                                              byref(size))
+                27,
+                byref(pbi),
+                sizeof(pbi),
+                byref(size))
 
         if NT_SUCCESS(ret) and size.value > 8:
             try:
@@ -165,17 +179,17 @@ class Process:
         NTDLL.NtQueryInformationProcess.restype = c_int
 
         ret = NTDLL.NtQueryInformationProcess(self.h_process,
-                                              0,
-                                              byref(pbi),
-                                              sizeof(pbi),
-                                              byref(size))
+                0,
+                byref(pbi),
+                sizeof(pbi),
+                byref(size))
 
         if NT_SUCCESS(ret) and size.value == sizeof(pbi):
             return pbi[5]
 
         return None
 
-    def execute(self, path, args=None, suspended=False):
+    def execute(self, path, args=None, suspended=False, kernel_analysis=False):
         """Execute sample process.
         @param path: sample path.
         @param args: process args.
@@ -184,7 +198,7 @@ class Process:
         """
         if not os.access(path, os.X_OK):
             log.error("Unable to access file at path \"%s\", "
-                      "execution aborted", path)
+                    "execution aborted", path)
             return False
 
         startup_info = STARTUPINFO()
@@ -202,15 +216,15 @@ class Process:
             creation_flags += CREATE_SUSPENDED
 
         created = KERNEL32.CreateProcessA(path,
-                                          arguments,
-                                          None,
-                                          None,
-                                          None,
-                                          creation_flags,
-                                          None,
-                                          os.getenv("TEMP"),
-                                          byref(startup_info),
-                                          byref(process_info))
+                arguments,
+                None,
+                None,
+                None,
+                creation_flags,
+                None,
+                os.getenv("TEMP"),
+                byref(startup_info),
+                byref(process_info))
 
         if created:
             self.pid = process_info.dwProcessId
@@ -218,12 +232,113 @@ class Process:
             self.thread_id = process_info.dwThreadId
             self.h_thread = process_info.hThread
             log.info("Successfully executed process from path \"%s\" with "
-                     "arguments \"%s\" with pid %d", path, args or "", self.pid)
+                    "arguments \"%s\" with pid %d", path, args or "", self.pid)
+
+            if kernel_analysis == True:
+                log.info("Starting kernel analysis")
+                log.info("Installing driver")
+                if is_os_64bit():
+                    sys_file = os.path.join(os.getcwd(), "dll", "zer0m0n_x64.sys")
+                else:
+                    sys_file = os.path.join(os.getcwd(), "dll", "zer0m0n.sys")
+                exe_file = os.path.join(os.getcwd(), "dll", "logs_dispatcher.exe")
+                if not sys_file or not exe_file or not os.path.exists(sys_file) or not os.path.exists(exe_file):
+                    log.warning("No valid zer0m0n files to be used for process with pid %d, injection aborted", self.pid)
+                    return False
+
+                exe_name = random_string(6)
+                service_name = random_string(6)
+                driver_name = random_string(6)
+                inf_data = '[Version]\r\nSignature = "$Windows NT$"\r\nClass = "ActivityMonitor"\r\nClassGuid = {b86dff51-a31e-4bac-b3cf-e8cfe75c9fc2}\r\nProvider= %Prov%\r\nDriverVer = 22/01/2014,1.0.0.0\r\nCatalogFile = %DriverName%.cat\r\n[DestinationDirs]\r\nDefaultDestDir = 12\r\nMiniFilter.DriverFiles = 12\r\n[DefaultInstall]\r\nOptionDesc = %ServiceDescription%\r\nCopyFiles = MiniFilter.DriverFiles\r\n[DefaultInstall.Services]\r\nAddService = %ServiceName%,,MiniFilter.Service\r\n[DefaultUninstall]\r\nDelFiles = MiniFilter.DriverFiles\r\n[DefaultUninstall.Services]\r\nDelService = %ServiceName%,0x200\r\n[MiniFilter.Service]\r\nDisplayName= %ServiceName%\r\nDescription= %ServiceDescription%\r\nServiceBinary= %12%\\%DriverName%.sys\r\nDependencies = "FltMgr"\r\nServiceType = 2\r\nStartType = 3\r\nErrorControl = 1\r\nLoadOrderGroup = "FSFilter Activity Monitor"\r\nAddReg = MiniFilter.AddRegistry\r\n[MiniFilter.AddRegistry]\r\nHKR,,"DebugFlags",0x00010001 ,0x0\r\nHKR,"Instances","DefaultInstance",0x00000000,%DefaultInstance%\r\nHKR,"Instances\\"%Instance1.Name%,"Altitude",0x00000000,%Instance1.Altitude%\r\nHKR,"Instances\\"%Instance1.Name%,"Flags",0x00010001,%Instance1.Flags%\r\n[MiniFilter.DriverFiles]\r\n%DriverName%.sys\r\n[SourceDisksFiles]\r\n'+driver_name+'.sys = 1,,\r\n[SourceDisksNames]\r\n1 = %DiskId1%,,,\r\n[Strings]\r\n'+'Prov = "'+random_string(8)+'"\r\nServiceDescription = "'+random_string(12)+'"\r\nServiceName = "'+service_name+'"\r\nDriverName = "'+driver_name+'"\r\nDiskId1 = "'+service_name+' Device Installation Disk"\r\nDefaultInstance = "'+service_name+' Instance"\r\nInstance1.Name = "'+service_name+' Instance"\r\nInstance1.Altitude = "370050"\r\nInstance1.Flags = 0x0'
+
+                new_inf = os.path.join(os.getcwd(), "dll", "{0}.inf".format(service_name))
+                new_sys = os.path.join(os.getcwd(), "dll", "{0}.sys".format(driver_name))
+                copy(sys_file, new_sys)
+                new_exe = os.path.join(os.getcwd(), "dll", "{0}.exe".format(exe_name))
+                copy(exe_file, new_exe)
+                log.info("[-] Driver name : "+new_sys)
+                log.info("[-] Inf name : "+new_inf)
+                log.info("[-] Application name : "+new_exe)
+                log.info("[-] Service : "+service_name)
+
+                fh = open(new_inf,"w")
+                fh.write(inf_data)
+                fh.close()
+
+                if is_os_64bit():
+                    wow64 = c_ulong(0)
+                    KERNEL32.Wow64DisableWow64FsRedirection(byref(wow64))
+
+                os.system('cmd /c "rundll32 setupapi.dll, InstallHinfSection DefaultInstall 132 '+new_inf+'"')
+                os.system("net start "+service_name)
+
+                si = STARTUPINFO()
+                si.cb = sizeof(startup_info)
+                pi = PROCESS_INFORMATION() 
+                cr = CREATE_NEW_CONSOLE
+                ldp = KERNEL32.CreateProcessA(new_exe,
+                                              None,
+                                              None,
+                                              None,
+                                              None,
+                                              cr,
+                                              None,
+                                              os.getenv("TEMP"),
+                                              byref(si),
+                                              byref(pi))
+                if not ldp:
+                    log.error("Failed starting "+exe_name+".exe.")
+                    return False
+
+                config_path = os.path.join(os.getenv("TEMP"), "%s.ini" % self.pid)
+                with open(config_path, "w") as config:
+                    cfg = Config("analysis.conf")
+
+                    config.write("host-ip={0}\n".format(cfg.ip))
+                    config.write("host-port={0}\n".format(cfg.port))
+                    config.write("pipe={0}\n".format(PIPE))
+
+                log.info("Sending startup information")
+                hFile = KERNEL32.CreateFileA(PATH_KERNEL_DRIVER, GENERIC_READ|GENERIC_WRITE, 
+                                             0, None, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, None)
+                
+                if hFile:
+                    p = Process(pid=os.getpid())
+                    ppid = p.get_parent_pid()
+                    pid_vboxservice = 0
+                    pid_vboxtray = 0
+
+                    # get pid of VBoxService.exe and VBoxTray.exe
+                    proc_info = PROCESSENTRY32()
+                    proc_info.dwSize = sizeof(PROCESSENTRY32)
+
+                    snapshot = KERNEL32.CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
+                    flag = KERNEL32.Process32First(snapshot, byref(proc_info))
+                    while flag:
+                        if proc_info.sz_exeFile == "VBoxService.exe":
+                            log.info("VBoxService.exe found !")
+                            pid_vboxservice = proc_info.th32ProcessID
+                            flag = 0
+                        elif proc_info.sz_exeFile == "VBoxTray.exe":
+                            pid_vboxtray = proc_info.th32ProcessID
+                            log.info("VBoxTray.exe found !")
+                            flag = 0
+                        flag = KERNEL32.Process32Next(snapshot, byref(proc_info))
+                    msg = str(self.pid)+"_"+str(ppid)+"_"+str(os.getpid())+"_"+str(pi.dwProcessId)+"_"+str(pid_vboxservice)+"_"+str(pid_vboxtray)+'\0'
+                    buf = create_string_buffer(128)
+                    length = c_int()
+                    KERNEL32.DeviceIoControl.argtypes = [c_int, c_int, c_char_p, c_int, c_void_p, c_int, POINTER(c_int), c_void_p]
+                    KERNEL32.DeviceIoControl(hFile, IOCTL_PID, msg, len(msg), byref(buf), 128, byref(length), None)
+                    msg = os.getcwd()+'\0'
+                    KERNEL32.DeviceIoControl(hFile, IOCTL_CUCKOO_PATH, unicode(msg), len(msg), byref(buf), 128, byref(length), None)
+                else:
+                    log.warning("Failed to access kernel driver")    
+
             return True
         else:
             log.error("Failed to execute process from path \"%s\" with "
-                      "arguments \"%s\" (Error: %s)", path, args,
-                      get_error_string(KERNEL32.GetLastError()))
+                    "arguments \"%s\" (Error: %s)", path, args,
+                    get_error_string(KERNEL32.GetLastError()))
             return False
 
     def resume(self):
@@ -232,7 +347,7 @@ class Process:
         """
         if not self.suspended:
             log.warning("The process with pid %d was not suspended at creation"
-                        % self.pid)
+                    % self.pid)
             return False
 
         if not self.h_thread:
@@ -272,7 +387,7 @@ class Process:
 
         if not self.is_alive():
             log.warning("The process with pid %s is not alive, "
-                        "injection aborted", self.pid)
+                    "injection aborted", self.pid)
             return False
 
         if not dll:
@@ -282,30 +397,30 @@ class Process:
 
         if not dll or not os.path.exists(dll):
             log.warning("No valid DLL specified to be injected in process "
-                        "with pid %d, injection aborted.", self.pid)
+                    "with pid %d, injection aborted.", self.pid)
             return False
 
         arg = KERNEL32.VirtualAllocEx(self.h_process,
-                                      None,
-                                      len(dll) + 1,
-                                      MEM_RESERVE | MEM_COMMIT,
-                                      PAGE_READWRITE)
+                None,
+                len(dll) + 1,
+                MEM_RESERVE | MEM_COMMIT,
+                PAGE_READWRITE)
 
         if not arg:
             log.error("VirtualAllocEx failed when injecting process with "
-                      "pid %d, injection aborted (Error: %s)",
-                      self.pid, get_error_string(KERNEL32.GetLastError()))
+                    "pid %d, injection aborted (Error: %s)",
+                    self.pid, get_error_string(KERNEL32.GetLastError()))
             return False
 
         bytes_written = c_int(0)
         if not KERNEL32.WriteProcessMemory(self.h_process,
-                                           arg,
-                                           dll + "\x00",
-                                           len(dll) + 1,
-                                           byref(bytes_written)):
+                arg,
+                dll + "\x00",
+                len(dll) + 1,
+                byref(bytes_written)):
             log.error("WriteProcessMemory failed when injecting process with "
-                      "pid %d, injection aborted (Error: %s)",
-                      self.pid, get_error_string(KERNEL32.GetLastError()))
+                    "pid %d, injection aborted (Error: %s)",
+                    self.pid, get_error_string(KERNEL32.GetLastError()))
             return False
 
         kernel32_handle = KERNEL32.GetModuleHandleA("kernel32.dll")
@@ -339,21 +454,21 @@ class Process:
             log.debug("Using QueueUserAPC injection.")
             if not self.h_thread:
                 log.info("No valid thread handle specified for injecting "
-                         "process with pid %d, injection aborted.", self.pid)
+                        "process with pid %d, injection aborted.", self.pid)
                 return False
 
             if not KERNEL32.QueueUserAPC(load_library, self.h_thread, arg):
                 log.error("QueueUserAPC failed when injecting process with "
-                          "pid %d (Error: %s)",
-                          self.pid, get_error_string(KERNEL32.GetLastError()))
+                        "pid %d (Error: %s)",
+                        self.pid, get_error_string(KERNEL32.GetLastError()))
                 return False
             log.info("Successfully injected process with pid %d." % self.pid)
         else:
             event_name = "CuckooEvent%d" % self.pid
             self.event_handle = KERNEL32.CreateEventA(None,
-                                                      False,
-                                                      False,
-                                                      event_name)
+                    False,
+                    False,
+                    event_name)
             if not self.event_handle:
                 log.warning("Unable to create notify event..")
                 return False
@@ -361,16 +476,16 @@ class Process:
             log.debug("Using CreateRemoteThread injection.")
             new_thread_id = c_ulong(0)
             thread_handle = KERNEL32.CreateRemoteThread(self.h_process,
-                                                        None,
-                                                        0,
-                                                        load_library,
-                                                        arg,
-                                                        0,
-                                                        byref(new_thread_id))
+                    None,
+                    0,
+                    load_library,
+                    arg,
+                    0,
+                    byref(new_thread_id))
             if not thread_handle:
                 log.error("CreateRemoteThread failed when injecting process "
-                          "with pid %d (Error: %s)",
-                          self.pid, get_error_string(KERNEL32.GetLastError()))
+                        "with pid %d (Error: %s)",
+                        self.pid, get_error_string(KERNEL32.GetLastError()))
                 KERNEL32.CloseHandle(self.event_handle)
                 self.event_handle = None
                 return False
@@ -396,7 +511,7 @@ class Process:
 
         if not self.is_alive():
             log.warning("The process with pid %d is not alive, memory "
-                        "dump aborted", self.pid)
+                    "dump aborted", self.pid)
             return False
 
         self.get_system_info()
@@ -419,9 +534,9 @@ class Process:
             count = c_ulong(0)
 
             if KERNEL32.VirtualQueryEx(self.h_process,
-                                       mem,
-                                       byref(mbi),
-                                       sizeof(mbi)) < sizeof(mbi):
+                    mem,
+                    byref(mbi),
+                    sizeof(mbi)) < sizeof(mbi):
                 mem += page_size
                 continue
 
diff -rupN cuckoo/analyzer/windows/lib/common/abstracts.py cuckoo_to_patch/analyzer/windows/lib/common/abstracts.py
--- cuckoo/analyzer/windows/lib/common/abstracts.py	2014-11-20 14:51:18.695892951 +0100
+++ cuckoo_to_patch/analyzer/windows/lib/common/abstracts.py	2014-11-20 14:49:33.229222268 +0100
@@ -72,17 +72,21 @@ class Package(object):
         """
         dll = self.options.get("dll")
         free = self.options.get("free")
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         suspended = True
         if free:
             suspended = False
 
         p = Process()
-        if not p.execute(path=path, args=args, suspended=suspended):
+        if not p.execute(path=path, args=args, suspended=suspended, kernel_analysis=kernel_analysis):
             raise CuckooPackageError("Unable to execute the initial process, "
                                      "analysis aborted.")
 
         if not free and suspended:
-            p.inject(dll)
+            if not kernel_analysis:
+                p.inject(dll)
             p.resume()
             p.close()
         
diff -rupN cuckoo/analyzer/windows/lib/common/defines.py cuckoo_to_patch/analyzer/windows/lib/common/defines.py
--- cuckoo/analyzer/windows/lib/common/defines.py	2014-11-20 14:51:18.695892951 +0100
+++ cuckoo_to_patch/analyzer/windows/lib/common/defines.py	2014-11-20 14:49:33.232555601 +0100
@@ -77,6 +77,7 @@ FILE_ATTRIBUTE_HIDDEN     = 0x00000002
 WM_GETTEXT                = 0x0000000D
 WM_GETTEXTLENGTH          = 0x0000000E
 BM_CLICK                  = 0x000000F5
+TH32CS_SNAPPROCESS        = 0x02L
 
 class STARTUPINFO(Structure):
     _fields_ = [
@@ -100,6 +101,22 @@ class STARTUPINFO(Structure):
         ("hStdError",     HANDLE),
     ]
 
+class PROCESSENTRY32(Structure):
+    _fields_ = [
+            ("dwSize", DWORD),
+            ("cntUsage", DWORD),
+            ("th32ProcessID", DWORD),
+            ("th32DefaultHeapID", DWORD),
+            ("th32ModuleID", DWORD),
+            ("cntThreads", DWORD),
+            ("th32ParentProcessID", DWORD),
+            ("pcPriClassBase", DWORD),
+            ("dwFlags", DWORD),
+            ("sz_exeFile", c_char * 260),
+     ]
+
+            
+
 class PROCESS_INFORMATION(Structure):
     _fields_ = [
         ("hProcess",    HANDLE),
diff -rupN cuckoo/analyzer/windows/modules/packages/bin.py cuckoo_to_patch/analyzer/windows/modules/packages/bin.py
--- cuckoo/analyzer/windows/modules/packages/bin.py	2014-11-20 14:51:18.695892951 +0100
+++ cuckoo_to_patch/analyzer/windows/modules/packages/bin.py	2014-11-20 14:49:33.252555602 +0100
@@ -11,7 +11,11 @@ class Shellcode(Package):
     def start(self, path):
         p = Process()
         dll = self.options.get("dll")
+        kernel_analysis = self.options.get("kernel_analysis", False)
+        if kernel_analysis != False:
+            kernel_analysis = True
         p.execute(path="bin/execsc.exe", args=path, suspended=True)
-        p.inject(dll)
+        if not kernel_analysis:
+            p.inject(dll)
         p.resume()
         return p.pid
Binary files cuckoo/.git/index and cuckoo_to_patch/.git/index differ
diff -rupN cuckoo/.git/logs/HEAD cuckoo_to_patch/.git/logs/HEAD
--- cuckoo/.git/logs/HEAD	2014-11-20 14:51:18.682559617 +0100
+++ cuckoo_to_patch/.git/logs/HEAD	2014-11-20 14:49:33.229222268 +0100
@@ -1 +1 @@
-0000000000000000000000000000000000000000 0d7596c5aae813d526882f2a4b398b3a0488df58 angel_killah <nicoinfo.c@gmail.com> 1416491478 +0100	clone: from https://github.com/cuckoobox/cuckoo.git
+0000000000000000000000000000000000000000 0d7596c5aae813d526882f2a4b398b3a0488df58 angel_killah <nicoinfo.c@gmail.com> 1416484233 +0100	clone: from https://github.com/cuckoobox/cuckoo.git
diff -rupN cuckoo/.git/logs/refs/heads/master cuckoo_to_patch/.git/logs/refs/heads/master
--- cuckoo/.git/logs/refs/heads/master	2014-11-20 14:51:18.682559617 +0100
+++ cuckoo_to_patch/.git/logs/refs/heads/master	2014-11-20 14:49:33.229222268 +0100
@@ -1 +1 @@
-0000000000000000000000000000000000000000 0d7596c5aae813d526882f2a4b398b3a0488df58 angel_killah <nicoinfo.c@gmail.com> 1416491478 +0100	clone: from https://github.com/cuckoobox/cuckoo.git
+0000000000000000000000000000000000000000 0d7596c5aae813d526882f2a4b398b3a0488df58 angel_killah <nicoinfo.c@gmail.com> 1416484233 +0100	clone: from https://github.com/cuckoobox/cuckoo.git
diff -rupN cuckoo/.git/logs/refs/remotes/origin/HEAD cuckoo_to_patch/.git/logs/refs/remotes/origin/HEAD
--- cuckoo/.git/logs/refs/remotes/origin/HEAD	2014-11-20 14:51:18.682559617 +0100
+++ cuckoo_to_patch/.git/logs/refs/remotes/origin/HEAD	2014-11-20 14:49:33.229222268 +0100
@@ -1 +1 @@
-0000000000000000000000000000000000000000 0d7596c5aae813d526882f2a4b398b3a0488df58 angel_killah <nicoinfo.c@gmail.com> 1416491478 +0100	clone: from https://github.com/cuckoobox/cuckoo.git
+0000000000000000000000000000000000000000 0d7596c5aae813d526882f2a4b398b3a0488df58 angel_killah <nicoinfo.c@gmail.com> 1416484233 +0100	clone: from https://github.com/cuckoobox/cuckoo.git
diff -rupN cuckoo/lib/cuckoo/common/logtbl.py cuckoo_to_patch/lib/cuckoo/common/logtbl.py
--- cuckoo/lib/cuckoo/common/logtbl.py	2014-11-20 14:51:18.719226285 +0100
+++ cuckoo_to_patch/lib/cuckoo/common/logtbl.py	2014-11-20 14:49:33.255888935 +0100
@@ -193,4 +193,49 @@ table = [
     ("ZwMapViewOfSection", "process", ("ppPp", "SectionHandle", "ProcessHandle", "BaseAddress", "SectionOffset")),
     ("GetSystemMetrics", "misc", ("l", "SystemMetricIndex")),
     ("GetCursorPos", "misc", ("ll", "x", "y")),
+    ("REGISTRY_OPEN_KEY", "registry", ("s", "SubKey")),
+    ("REGISTRY_DELETE_KEY", "registry", ("s", "SubKey")),
+    ("REGISTRY_VALUE_KEY_SET", "registry", ("sss", "SubKey", "ValueName", "Data")),
+    ("REGISTRY_VALUE_KEY_DELETE", "registry", ("ss", "SubKey", "ValueName")),
+    ("REGISTRY_KEY_RENAME", "registry", ("ss", "SubKey", "NewName")),
+    ("REGISTRY_ENUMERATE_KEY", "registry", ("s", "SubKey")),
+    ("REGISTRY_ENUMERATE_VALUE_KEY", "registry", ("s", "SubKey")),
+    ("REGISTRY_QUERY_KEY", "registry", ("s", "SubKey")),
+    ("REGISTRY_QUERY_VALUE_KEY", "registry", ("ss", "SubKey", "ValueName")),
+    ("REGISTRY_CREATE_KEY", "registry", ("s", "SubKey")),
+    ("LOAD_DRIVER", "system", ("s", "DriverName")),
+    ("ZwOpenProcess", "process", ("ssss", "ProcessHandle", "ProcessName", "PID", "DesiredAccess")),
+    ("ZwOpenThread", "threading", ("sss", "ThreadHandle", "TID", "DesiredAccess")),
+    ("ZwQuerySystemInformation", "process", ("s", "SystemInformationClass")),
+    ("ZwWriteVirtualMemory", "process", ("sssss", "ProcessHandle", "PID", "BaseAddress", "Buffer", "NumberOfBytesToWrite")),
+    ("ZwDebugActiveProcess", "process", ("sss", "ProcessHandle", "PID", "DebugHandle")),
+    ("ZwCreateProcess", "process", ("ssssss", "ProcessHandle", "PID", "DesiredAccess", "InheritObjectTable", "ParentProcess", "SectionHandle")),
+    ("ZwCreateProcessEx", "process", ("ssssss", "ProcessHandle", "PID", "DesiredAccess", "InheritHandles", "InheritFromProcessHandle", "SectionHandle")),
+    ("ZwQueueApcThread", "threading", ("ssss", "ThreadHandle", "TID", "PID", "ApcRoutine")),
+    ("ZwCreateThread", "threading", ("sssss", "PID", "ThreadHandle", "TID", "CreateSuspended", "DesiredAccess")),
+    ("ZwCreateThreadEx", "threading", ("sssss", "PID", "ThreadHandle", "TID", "CreateSuspended", "DesiredAccess")),
+    ("NtMapViewOfSection", "process", ("sssss", "ProcessHandle", "PID", "BaseAddress", "SectionHandle", "Win32Protect")),
+    ("ZwSetContextThread", "threading", ("sss", "ThreadHandle", "TID", "PID")),
+    ("ZwSystemDebugControl", "process", ("s","Command")),
+    ("ZwCreateFile", "filesystem", ("ssssssss", "FileHandle", "FileName", "DesiredAccess", "CreateDisposition", "CreateOptions", "FileAttributes", "ShareAccess", "Status")),
+    ("ZwOpenFile", "filesystem", ("sssss", "FileHandle", "FileName", "DesiredAccess", "ShareAccess", "OpenOptions")),
+    ("ZwReadFile", "filesystem", ("ssss", "FileHandle",  "FileHandle", "FileName", "Buffer", "Length")),
+    ("ZwWriteFile", "filesystem", ("ssss", "FileHandle", "FileName", "Buffer", "Length")),
+    ("ZwDeleteFile", "filesystem", ("s", "FileName")),
+    ("ZwClose (FILE_DELETE_ON_CLOSE)", "filesystem", ("sss", "FileHandle", "FileName", "FileToDump")),
+    ("ZwSetInformationFile (Delete)", "filesystem", ("sss", "FileHandle", "FileName", "FileInformationClass")),
+    ("ZwSetInformationFile (Rename)", "filesystem", ("ssss", "FileHandle", "OriginalName", "Renamed", "FileInformationClass")),
+    ("ZwQueryInformationFile", "filesystem", ("ss", "FileHandle", "FileInformationClass")),
+    ("ZwCreateMutant", "synchronization", ("ssss", "MutantHandle","DesiredAccess", "MutexName", "InitialOwner")),
+    ("ZwDeviceIoControlFile", "system", ("ss", "FileHandle", "IoControlColde")),
+    ("ZwTerminateProcess", "process", ("sss", "ProcessHandle", "PID", "ExitStatus")),
+    ("ZwDelayExecution", "system", ("s", "DelayInterval")),
+    ("ZwQueryAttributesFile", "filesystem", ("s", "FileName")),
+    ("ZwReadVirtualMemory", "process", ("ssss", "ProcessHandle", "PID", "BaseAddress", "NumberOfBytesToRead")),
+    ("ZwResumeThread", "threading", ("ss", "ThreadHandle", "SuspendCount")),
+    ("ZwCreateSection", "process", ("sss", "SectionHandle", "FileHandle", "FileName")),
+    ("ZwUserCallOneParam", "system", ("ss", "Param", "Routine")),
+    ("ZwUserCallNoParam", "system", ("s", "Routine")),
+    ("ZwLoadDriver", "system", ("s", "DriverName")),
+    ("ZwCreateUserProcess", "process", ("sssssss", "ProcessHandle", "ThreadHandle", "PID",  "ProcessDesiredAccess", "ThreadDesiredAccess" "ImagePathName",       "CommandLine")),
 ]
diff -rupN cuckoo/modules/processing/behavior.py cuckoo_to_patch/modules/processing/behavior.py
--- cuckoo/modules/processing/behavior.py	2014-11-20 14:51:18.725892952 +0100
+++ cuckoo_to_patch/modules/processing/behavior.py	2014-11-20 14:49:33.262555602 +0100
@@ -329,6 +329,21 @@ class Summary:
             name = self._check_registry(registry, subkey, handle)
             if name and name not in self.keys:
                 self.keys.append(name)
+
+        elif call["api"] == ("REGISTRY_OPEN_KEY"):
+            registry = -1
+            subkey = ""
+            handle = 0
+
+            for argument in call["arguments"]:
+                if argument["name"] == "SubKey":
+                    subkey = argument["value"]
+
+            name = self._check_registry(registry, subkey, handle)
+            if name and name not in self.keys:
+                self.keys.append(name)
+
+
         elif call["api"].startswith("NtOpenKey"):
             registry = -1
             subkey = ""
diff -rupN cuckoo/web/submission/views.py cuckoo_to_patch/web/submission/views.py
--- cuckoo/web/submission/views.py	2014-11-20 14:51:18.732559619 +0100
+++ cuckoo_to_patch/web/submission/views.py	2014-11-20 14:49:33.265888936 +0100
@@ -27,6 +27,7 @@ def index(request):
         package = request.POST.get("package", "")
         timeout = force_int(request.POST.get("timeout"))
         options = request.POST.get("options", "")
+        analysis = force_int(request.POST.get("analysis"))
         priority = force_int(request.POST.get("priority"))
         machine = request.POST.get("machine", "")
         custom = request.POST.get("custom", "")
@@ -43,6 +44,11 @@ def index(request):
             if options:
                 options += ","
             options += "procmemdump=yes"
+        
+        if analysis == 2:
+            if options:
+                options += "&"
+            options += "kernel_analysis=yes"
 
         db = Database()
         task_ids = []
diff -rupN cuckoo/web/templates/submission/index.html cuckoo_to_patch/web/templates/submission/index.html
--- cuckoo/web/templates/submission/index.html	2014-11-20 14:51:18.735892953 +0100
+++ cuckoo_to_patch/web/templates/submission/index.html	2014-11-20 14:49:33.269222269 +0100
@@ -101,6 +101,15 @@ $(document).ready( function() {
                                 <label for="form_options">Options</label>
                                 <input type="text" class="form-control" id="form_options" name="options" />
                             </div>
+
+                            <div class="form-group">
+                                <label for "form_analysis">Analysis</label>
+                                <select class="form-control" id="form_analysis" name="analysis">
+                                    <option value="1">Userland</option>
+                                    <option value="2">Kernelland</option>
+                                </select>
+                            </div>
+
                             <div class="form-group">
                                 <label for="form_priority">Priority</label>
                                 <select class="form-control" id="form_priority" name="priority">
@@ -153,4 +162,4 @@ $(document).ready( function() {
         </form>
     </div>
 </div>
-{% endblock %}
\ No newline at end of file
+{% endblock %}
diff -rupN cuckoo/web/web/settings.py cuckoo_to_patch/web/web/settings.py
--- cuckoo/web/web/settings.py	2014-11-20 14:51:18.735892953 +0100
+++ cuckoo_to_patch/web/web/settings.py	2014-11-20 14:49:33.269222269 +0100
@@ -100,7 +100,7 @@ ROOT_URLCONF = 'web.urls'
 WSGI_APPLICATION = 'web.wsgi.application'
 
 TEMPLATE_DIRS = (
-    "templates"
+    "templates",
 )
 
 INSTALLED_APPS = (
